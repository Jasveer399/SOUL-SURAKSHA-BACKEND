// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum UserType {
//   Parent
//   Student
// }

model Student {
  id           String   @id @default(uuid())
  fullName     String
  phone        String
  email        String   @unique
  password     String
  studentImage String?
  age          Int?
  trustPhoneNo String?
  createdAt    DateTime @default(now())

  // Relations
  stories      Story[]
  comments     Comment[]
  likes        Like[]
  Conversation Conversation[]

  @@index([email])
}

model Parent {
  id          String   @id @default(uuid())
  fullName    String
  phone       String
  email       String   @unique
  password    String
  parentImage String?
  createdAt   DateTime @default(now())

  // Relations
  comments Comment[]
  likes    Like[]

  @@index([email])
}

model Therapist {
  id             String          @id @default(uuid())
  userName       String
  phone          String
  email          String          @unique
  password       String
  therapistImage String?
  languageType   String[]
  qualifications String?
  verified       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  Conversation   Conversation[]
}

// model Qualification {
//   id          String    @id @default(uuid())
//   name        String
//   therapistId String
//   therapist   Therapist @relation(fields: [therapistId], references: [id])
// }

model Story {
  id        String    @id @default(uuid())
  title     String? // You might want to add this
  content   String
  image     String?
  audio     String?
  createdAt DateTime  @default(now())
  studentId String
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]

  @@index([studentId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Make these optional and mutually exclusive
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  storyId String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId])
  @@index([studentId])
  @@index([parentId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Make these optional and mutually exclusive
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Parent?  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  storyId String
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  // Prevent multiple likes from same user on same story
  @@unique([studentId, storyId])
  @@unique([parentId, storyId])
  @@index([storyId])
  @@index([studentId])
  @@index([parentId])
}

model Conversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now()) // Helps with sorting conversations
  lastMessage   String?  // Last message content

  // Participants (Student and Therapist)
  studentId   String
  therapistId String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  // Relation to messages
  messages Message[]

  @@unique([studentId, therapistId]) // Ensures unique conversation between participants
  @@index([studentId])
  @@index([therapistId])
  @@index([lastMessageAt]) // Helps with sorting conversations
}

model Message {
  id        String   @id @default(uuid())
  content   String // The message text
  createdAt DateTime @default(now())

  // Message status
  seen   Boolean   @default(false)
  seenAt DateTime? // Timestamp when message was seen

  // Sender information (can be either Student or Therapist)
  senderId   String // ID of the sender
  senderType SenderType // Enum to distinguish between Student and Therapist

  // Conversation relation
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([seen])
}

enum SenderType {
  STUDENT
  THERAPIST
}
