generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  imgUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Student {
  id              String         @id @default(uuid())
  fullName        String
  userName        String?        @unique
  phone           String?        @unique
  email           String         @unique
  password        String
  studentImage    String?
  age             Int?
  trustPhoneNo    String?
  createdAt       DateTime       @default(now())
  bio             String?
  dob             String?
  gender          String?
  quizScore       Int            @default(0)
  isOtpVerify     Boolean        @default(false)
  otp             String?
  isMailOtpVerify Boolean        @default(false)
  comments        Comment[]
  Conversation    Conversation[]
  likes           Like[]
  quizAttempts    QuizAttempt[]
  Review          Review[]
  stories         Story[]
  viewBlog        ViewBlog[]

  @@index([email])
}

model Parent {
  id              String           @id @default(uuid())
  fullName        String
  phone           String?          @unique
  email           String           @unique
  password        String
  parentImage     String?
  createdAt       DateTime         @default(now())
  gender          String?
  dob             String?          @default("")
  isOtpVerify     Boolean          @default(false)
  otp             String?
  isMailOtpVerify Boolean          @default(false)
  comments        Comment[]
  DonationRecord  DonationRecord[]
  likes           Like[]
  viewBlog        ViewBlog[]

  @@index([email])
}

model Therapist {
  id              String           @id @default(uuid())
  userName        String
  phone           String?          @unique
  email           String           @unique
  password        String
  therapistImage  String?
  languageType    String[]
  qualifications  String?
  specialization  String?
  experience      Float?
  bio             String?
  verified        Boolean          @default(false)
  ratings         Float?           @default(0)
  createdAt       DateTime         @default(now())
  gender          String?
  licenseNO       String?
  recoveryEmail   String?
  dob             String?          @default("")
  isOtpVerify     Boolean          @default(false)
  otp             String?
  isMailOtpVerify Boolean          @default(false)
  comments        Comment[]
  Conversation    Conversation[]
  DonationRecord  DonationRecord[]
  likes           Like[]
  Review          Review[]
  viewBlog        ViewBlog[]
}

model Donation {
  id               String           @id @default(uuid())
  title            String
  organizedBy      String
  timePeriod       DateTime
  isDonationActive Boolean          @default(false)
  desc             String
  imgUrl           String?
  receivedAmount   Float?           @default(0)
  totalAmount      Float
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  donors           DonationRecord[]
}

model DonationRecord {
  id                String     @id @default(uuid())
  amount            Float
  razorpayOrderId   String?    @unique
  razorpayPaymentId String?    @unique
  createdAt         DateTime   @default(now())
  donationId        String
  parentId          String?
  therapistId       String?
  donation          Donation   @relation(fields: [donationId], references: [id])
  parent            Parent?    @relation(fields: [parentId], references: [id])
  therapist         Therapist? @relation(fields: [therapistId], references: [id])

  @@index([donationId])
  @@index([therapistId])
}

model Story {
  id            String      @id @default(uuid())
  title         String?
  content       String
  image         String      @default("")
  audio         String      @default("")
  createdAt     DateTime    @default(now())
  studentId     String
  audioDuration Float?
  isComplete    Boolean     @default(true)
  comments      Comment[]
  likes         Like[]
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  chunks        StoryChunk?

  @@index([studentId])
}

model StoryChunk {
  storyId        String   @id
  content        String
  chunkIndex     Int
  receivedChunks Int
  totalChunks    Int
  isComplete     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  story          Story    @relation(fields: [storyId], references: [id])
}

model Comment {
  id          String     @id @default(uuid())
  content     String
  createdAt   DateTime   @default(now())
  studentId   String?
  parentId    String?
  storyId     String
  therapistId String?
  parent      Parent?    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  story       Story      @relation(fields: [storyId], references: [id], onDelete: Cascade)
  student     Student?   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  therapist   Therapist? @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([storyId])
  @@index([studentId])
  @@index([parentId])
}

model Like {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  studentId   String?
  parentId    String?
  storyId     String
  therapistId String?
  parent      Parent?    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  story       Story      @relation(fields: [storyId], references: [id], onDelete: Cascade)
  student     Student?   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  therapist   Therapist? @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([studentId, storyId])
  @@unique([parentId, storyId])
  @@index([storyId])
  @@index([studentId])
  @@index([parentId])
}

model Blog {
  id           String     @id @default(uuid())
  title        String
  content      String
  summary      String
  blogCategory String
  tags         String[]   @default([])
  viewCount    Int        @default(0)
  image        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  viewBlog     ViewBlog[]
}

model ViewBlog {
  id          String     @id @default(uuid())
  blogId      String
  studentId   String?
  createdAt   DateTime   @default(now())
  parentId    String?
  therapistId String?
  blog        Blog       @relation(fields: [blogId], references: [id])
  parent      Parent?    @relation(fields: [parentId], references: [id])
  student     Student?   @relation(fields: [studentId], references: [id])
  therapist   Therapist? @relation(fields: [therapistId], references: [id])
}

model Conversation {
  id            String              @id @default(uuid())
  createdAt     DateTime            @default(now())
  lastMessageAt DateTime            @default(now())
  lastMessage   String?
  status        ConversationStatus?
  studentId     String
  therapistId   String
  student       Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  therapist     Therapist           @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([studentId, therapistId])
  @@index([studentId])
  @@index([therapistId])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  seen           Boolean      @default(false)
  seenAt         DateTime?
  senderId       String
  senderType     SenderType
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([seen])
}

model Review {
  id          String     @id @default(uuid())
  title       String
  review      String
  rating      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  studentId   String?
  therapistId String?
  Student     Student?   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Therapist   Therapist? @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([therapistId])
}

model Quiz {
  id        String        @id @default(uuid())
  question  String
  option1   String
  option2   String
  option3   String
  option4   String
  answer    String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  attempts  QuizAttempt[]
}

model QuizAttempt {
  id          String   @id @default(uuid())
  studentId   String
  quizId      String
  answer      String
  isCorrect   Boolean
  attemptedAt DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([quizId])
}

enum ConversationStatus {
  Accepted
  Pending
  Dismiss
}

enum SenderType {
  STUDENT
  THERAPIST
}
